// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  emailVerified DateTime?
  name         String?
  password     String
  role         RoleType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  castingCalls CastingCall[]
  accounts     Account[]
  sessions     Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CastingCall {
  id          String        @id @default(cuid())
  title       String
  description String
  location    String
  category    String
  producerId  String
  producer    User          @relation(fields: [producerId], references: [id])
  roles       Role[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Role {
  id            String        @id @default(cuid())
  name          String
  gender        String
  ageRange      String
  description   String
  castingCallId String
  castingCall   CastingCall   @relation(fields: [castingCallId], references: [id])
  applications  Application[]
}

model Application {
  id         String            @id @default(cuid())
  actorId    String
  actor      User              @relation(fields: [actorId], references: [id])
  roleId     String
  role       Role              @relation(fields: [roleId], references: [id])
  name       String
  email      String
  bio        String
  resume     String
  headshots  String[]
  videos     String[]
  status     ApplicationStatus @default(SUBMITTED)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

enum RoleType {
  ACTOR
  PRODUCER
}

enum ApplicationStatus {
  SUBMITTED
  VIEWED
  SHORTLISTED
  REJECTED
}
